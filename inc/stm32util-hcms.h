#ifndef __STM32UTIL_HCMS_H__
#define __STM32UTIL_HCMS_H__

#include "stm32util-base.h"

#if STM32UTIL_HCMS_SPI_ENABLE

#if !STM32UTIL_HCMS_SPI_USE_LL
#define STM32UTIL_HCMS_SPI_USE_HAL	1
#endif

#if !defined(STM32UTIL_HCMS_STRING_MAX)
#define STM32UTIL_HCMS_STRING_MAX	64
#endif

#if !defined(STM32UTIL_HCMS_CHAR_PER_DEVICE)
#define STM32UTIL_HCMS_CHAR_PER_DEVICE	4
#endif

#if STM32UTIL_HCMS_CHAR_PER_DEVICE != 4 && STM32UTIL_HCMS_CHAR_PER_DEVICE != 8
#error "Configuration error: STM32UTIL_HCMS_CHAR_PER_DEVICE must be either 4 or 8."
#endif

#if STM32UTIL_HCMS_SPI_RUNNEL == LL_DMA_RUNNEL_0
#define HCMS_SPI_RUNNEL_NUM	0
#elif STM32UTIL_HCMS_SPI_RUNNEL == LL_DMA_RUNNEL_1
#define HCMS_SPI_RUNNEL_NUM	1
#elif STM32UTIL_HCMS_SPI_RUNNEL == LL_DMA_RUNNEL_2
#define HCMS_SPI_RUNNEL_NUM	2
#elif STM32UTIL_HCMS_SPI_RUNNEL == LL_DMA_RUNNEL_3
#define HCMS_SPI_RUNNEL_NUM	3
#elif STM32UTIL_HCMS_SPI_RUNNEL == LL_DMA_RUNNEL_4
#define HCMS_SPI_RUNNEL_NUM	4
#elif STM32UTIL_HCMS_SPI_RUNNEL == LL_DMA_RUNNEL_5
#define HCMS_SPI_RUNNEL_NUM	5
#elif STM32UTIL_HCMS_SPI_RUNNEL == LL_DMA_RUNNEL_6
#define HCMS_SPI_RUNNEL_NUM	6
#elif STM32UTIL_HCMS_SPI_RUNNEL == LL_DMA_RUNNEL_7
#define HCMS_SPI_RUNNEL_NUM	7
#endif

#if !defined(STM32UTIL_HCMS_DMA_BUFFER_SECTION)
#define _AT_HCMS_DMA_BUFFER
#else
#define _AT_HCMS_DMA_BUFFER	__attribute__((section(STM32UTIL_HCMS_DMA_BUFFER_SECTION))
#endif

#if defined(__cplusplus)
extern "C" {
#endif

#define STM32UTIL_HCMS_SPI_DMA_IsActiveFlag_TC()	CONCAT_TOKEN(LL_DMA_IsActiveFlag_TC, TO_NUM(HCMS_SPI_RUNNEL_NUM))(STM32UTIL_HCMS_SPI_DMA)
#define STM32UTIL_HCMS_SPI_DMA_ClearFlag_TC()		CONCAT_TOKEN(LL_DMA_ClearFlag_TC, TO_NUM(HCMS_SPI_RUNNEL_NUM))(STM32UTIL_HCMS_SPI_DMA)
void STM32UTIL_HCMS_SPI_DMA_TC_isr();
void STM32UTIL_HCMS_SPI_TC_isr();

void stm32util_hcms_puts(const char* str);
void stm32util_hcms_reset();
bool stm32util_hcms_init();

#if defined(__cplusplus)
}
#endif

#endif // STM32UTIL_HCMS_SPI_ENABLE

#endif // __STM32UTIL_HCMS_H__
